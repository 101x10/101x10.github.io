[{"title":"OFDM基本概念","path":"/2023/07/26/ofdm/2023-07-26_ofdm_basic_principle/","content":"注意 以下内容翻译自（稍加修改）: Concepts of Orthogonal Frequency Division Multiplexing (OFDM) and 802.11 WLAN 主要内容 介绍 OFDM 技术基本概念 介绍 IEEE 802.11a 协议中 OFDM 的实现 OFDM 基本概念OFDM: orthogonal Frequency Division Multiplexing的缩写，正交频分复用的意思。一种数字多载波调制方案。 相对于单载波调制， 多载波指的是在同一信道下，有多个载波，且相互之间是正交的。 各个子载波使用传统的数字调制方案(像 QPSK, 16QAM, 等等）进行调制。 OFDM是基于众所周知的 FDM(Fequency Division Multiplexing，频分复用) 技术。在FDM中，不同的信息流映射到各个并行的频率信道上，各个FDM信道之间通过频率保护带进行隔离，以降低邻信道之间的干扰。 OFDM 方案与传统的FDM方案有如下几方面的差异： 多个载波（称为子载波）承载信息流 子载波之间相关正交 每个符号都有一个保护间隔，以尽量减少信道延迟扩散和符号间干扰 下图说明了 OFDM 信号的主要概念，以及频域和时域之间的相互关系， 发送端： 在频域，多个相邻单音或子载波单独对复数数据进行调制， 然后使用 IFFT (逆傅里叶变换) 对频域子载波进行转换，产生时域 OFDM 符号。 然后在时域，各个 OFDM 符号之间插入保护间隔(guard intervals)，防止 由于空口传输时多径延时扩散 导致 在接收端存在 符号间干扰 多个 OFDM 符号连接在一起，形成最终的 OFDM 信号 接收端： 对 OFDM 符号进行FFT变换来恢复原始的bit数据 OFDM 系统理解使用模拟信号实现简单的模拟 OFDM 系统我们将基于模拟信号的方式实现OFDM系统来展示产生一个OFDM信号的基本原理，如下图所示 在该OFDM系统中，有 N 个正弦输入信号，各个子载波传输 1 bit 的信号（共 N bits），在输出频谱上通过对应的bit存在或不存在指示。选择的各个子载波的频率正交以形成一个正交信号集。 这些正交的频率在接收端也是已知的用于信号恢复。 注意输出信号以形成符号周期的周期间隔 T 更新，为了保持正交性， T 必须是子载波间隔的倒数（WHY？？？）。 理解正交性 —— 正交的间隔子载波的重要性？OFDM 信号可以描述为一组紧密间隔的 FDM 子载波。在频域中，每个传输的子载波都会产生带有旁瓣的 sinc 函数频谱，该旁瓣会在子载波之间产生重叠频谱，请参见下图 “OFDM 信号频谱”。这会导致子载波干扰（正交间隔频率除外）。在正交频率下，子载波的各个峰值都与其他子载波的零点对齐。这种频谱能量的重叠不会干扰系统恢复原始信号的能力。接收端将输入信号乘以（即相关）已知的正弦信号集，以恢复发送的原始比特。 正交子载波的使用让每个带宽有更多的子载波，从而提高频谱效率。在完美的 OFDM 信号中，正交性可以防止重叠载波之间的干扰。在 FDM 系统中，相邻信号频谱的任何重叠都会导致干扰。在 OFDM 系统中，只有在子载波之间失去正交性的情况下，子载波才会相互干扰。例如，频率误差将导致子载波频率偏移，从而频谱零点将不再对齐，从而导致子载波间干扰。 使用 FFT 变换实现简单数字 OFDM 系统通过结合使用快速傅里叶变换 (FFT) 和快速傅里叶逆变换 (IFFT) 数字信号处理，可以将简单模拟 OFDM 实现中使用的概念扩展到数字域。从 OFDM 的角度来看，这些变换非常重要，因为它们可以被视为将数字调制的输入数据（数据符号）映射到正交子载波上。原则上，IFFT 获取频域输入数据（代表调制子载波的复数）并将其转换为时域输出数据（模拟 OFDM 符号波形）。 在数字实现的 OFDM 系统中，输入比特流被分组并映射到源数据符号，这些源数据符号是表示调制星座点的复数（例如，出现在单个子载波系统中的 BPSK 或 QAM 符号）。这些复数的源符号在发送端被视为频域中的符号，并且输入到 IFFT 模块变换到时域。 IFFT 每次接收 N 个源符号，其中 N 是系统中子载波的数量。这 N 个输入符号中的每一个都有 T 秒的符号周期。回想一下，IFFT 的输出是 N 个正交正弦信号。这些正交正弦信号各自具有不同的频率，最低的频率是直流（DC）。 输入符号是表示映射到星座点的复数值，因此指定该子载波的正弦信号的幅度和相位。 IFFT 输出是所有 N 个正弦信号的总和。因此，IFFT 模块提供了一种将数据调制到 N 个正交子载波上的简单方法。 IFFT 的 N 个输出样本块构成单个 OFDM 符号。 经过一些额外的处理后，IFFT 产生的时域信号通过无线电信道进行传输。在接收端，FFT 模块用于处理接收到的信号并将其转换为频域，用于恢复原始数据。 简单的 IEEE 802.11a协议 OFDM 信号实现802.11a OFDM 载波信号（busrt类型）是一个或多个 OFDM 符号的总和，每个符号由 52 个正交子载波组成，每个子载波上的基带数据使用正交幅度调制（可用格式：BPSK、QPSK、16-QAM 或 64-QAM）进行独立调制。该合成的基带信号用于调制到主RF载波上。 在开始构建 OFDM 信号前，输入数据比特流先进行卷积编码和交织。各数据流被分为 “n” bits的组（1 bit-BPSK, 2 bits-QPSK、4 bits-16QAM 或 6 bits-64QAM），并转换为表示映射星座点的复数（I+jQ）。请注意，比特速率会根据调制格式而有所不同，64-QAM 星座（一次 6 bits）的比特速率可以为 54 Mbps，而 QPSK 星座（一次 2 bit）的比特速率可能仅为 12 Mbps 。 然后加载 IFFT 模块的 52 个 bin。 48 个 bin 包含星座点，这些星座点被映射到范围从 -26 到 +26 的频率偏移索引，跳过 4 个导频和零 bin。频率偏移索引位置 -21、-7、+7 和 +21 索引位置插入了4个导频子载波。零 bin 是 Null 或 DC 子载波，不被使用；它包含一个 0 值 (0+j0)。 整个处理流程如下图所示 当 IFFT 块完全加载时，将计算逆 FFT，给出一组代表组合 OFDM 子载波波形的复数时域样本。样本以 20Msps 的时钟输出，创建 3.2us (20Msps&#x2F;64) duration的 OFDM 波形。为了完成 OFDM 符号，将 0.8us duration的保护间隔 (GI) 添加到 OFDM 波形的开头。这会产生一个持续时间为 4us 的”单个”OFDM 符号（3.2us + 0.8us）。重复该过程为剩余的输入数据bit流创建其他的 OFDM 符号。 为了完成 OFDM 帧结构，单个 OFDM 符号被连接在一起，然后附加到 16us Preamble（用于同步）和 4us SIGNAL符号（提供速率和长度信息）。这样就完成了 OFDM 帧，并准备好作为 OFDM busrt进行传输。 参考 Concepts of Orthogonal Frequency Division Multiplexing (OFDM) and 802.11 WLAN A Beginner’s Guide to OFDM 802.11 OFDM Overview OFDM overview - sharetechnote 无线通信基础2：深入理解OFDM（含Matlab代码） OFDM-功率谱密度的Matlab实现 第7章：OFDM中的fftshift和ifft IEEE802.11a OFDM MATLAB仿真","tags":["Wi-Fi","802.11","ofdm"],"categories":["Wi-Fi"]},{"title":"IEEE 802.11 帧格式","path":"/2023/07/26/2023-07-26_80211_frame_format/","content":"基于协议第9章，详述帧格式 一般要求 STA需要支持本章节介绍的帧子集的收发， 对于特定的某些帧子集，在特定STA支持的功能时才需要支持这些特定帧子集的收发。 STA需要支持FCS校验， STA需要支持从所有帧的mac头中解析某些字段 STA只能使用本章节介绍的帧格式进行帧收发 MAC帧格式基本组成每个MAC帧都如下三部分组成： MAC头， 包括 frame control duration address optional sequence control information optional QoS Control information (QoS Data Frame才包含该字段) optional HT Control字段 (+HTC帧才包含该字段) 帧体， 长度可变， 包含特定于 帧 类型(type)和子类型(subtype)的信息 FCS, 包含基于 ITU-T Recommendation V.42的一个32-bit的CRC 通用MAC帧格式MAC帧格式包括一组在所有帧中以固定顺序出现的字段，下图描述了协议版本0（PV0）MPDU的通用MAC帧格式 对于每一PV0 MPDU，至少包含如下字段 Frame Control Duration&#x2F;ID Address 1 FCS 以下字段只存在某些PV0 MPDU帧中 Address 2 Address 3 Sequence Control Address 4 QoS Control HT Control and Frame Body 帧字段Frame Control字段该字段结构如下图所示","tags":["Wi-Fi","802.11","frame format"],"categories":["Wi-Fi"]},{"title":"IEEE 802.11 节能机制","path":"/2023/07/25/2023-07-25_80211_power_save/","content":"PSM U-APSDPSMPSMPS参考 802.11协议精读9：初探节能模式（PS mode）与缓存机制 802.11协议精读10：节能模式（PSM） 802.11协议精读11：节能模式（APSD，PSMP，SM Power Save） 802.11协议精读23：再论APSD节能模式 802.11协议精读37：三论APSD节能模式 802.11协议精读43：再论SM Power Save（SMPS） Wi-Fi 6(802.11ax)解析18：TWT节能机制（Target Wake Time） Wi-Fi 6(802.11ax)解析19：再论802.11ax中的节能机制","tags":["Wi-Fi","powersave","802.11"],"categories":["Wi-Fi"]},{"title":"IEEE 802.11 MAC层功能介绍","path":"/2023/07/24/2023-07-24_80211_mac_sublayer_function_description/","content":"概述 MAC子层架构（协议10.2&#x2F;10.3&#x2F;10.23&#x2F;10.24），包括 DCF HCF MCF 以及它们共存形式 分片和去分片（协议10.4&#x2F;10.5） 多速率支持（协议10.6） MSDU重排序或者丢弃处理的附加限制（协议10.7） 跨管制域操作（协议10.22） 块确认（BA）机制（协议10.25） No Ack机制（协议10.26） 保护机制（协议10.27） MAC帧处理规则（协议10.28） 本节介绍 MAC 子层架构 MAC 子层架构MAC 层架构如下图所示 对于non-DMG，non-CMMG和non-SIG STA： MAC通过使用DCF服务来提供HCF和MCF服务，MAC同时也提供直接访问DCF服务 HCF只存在QoS STA中 MCF只存在mesh STA中 note DMG: directional multi-gigabit的缩写，指工作的频率大于45GHz的操作，一般指80211ad协议定义的操作 non-DMG: 非DMG CMMG: China millimeter-wave multi-gigabit的缩写，指工作的频率在42.3GHz~47.3GHz范围或者47.2GHz~48.4GHz的操作 non-CMMG: 非CMMG S1G: Sub 1 GHz的缩写，指工作频率小于1GHz的操作 non-S1G: 非S1G 名词解释 MAC变量（MAC variables）：MAC维护的信息，存储在本地变量中，该变量被称之为MAC变量。 状态变量（State variables）：保存状态信息的MAC变量，称之为状态变量。 DCFDistribute Coordinate Function的缩写， 分布式协调功能。 MAC使用的基本接入方式是被称为载波监听&#x2F;冲突避免（CSMA&#x2F;CA）的DCF。 注意： 所有的STA都需要实现DCF功能 HCFHybrid Coordination Function的缩写，混合协调功能。 HCF仅在QoS网络中使用， 注意: 所有的QoS STA (除了mesh STA）都需要实现HCF功能 HCF通过结合DCF功能和一些增强的，特定于QoS机制，以允许使用统一的一套帧交换序列用于QoS STA数据传输。 HCF使用基于竞争的信道接入方式（称为增加分布式信道接入（EDCA）机制）进行先竞争空口然后数据传输。同时使用受控的信道接入（也称为HCF受控信道接入（HCCA)机制）进行免竞争数据传输。 STA可以通过EDCA或者HCCA方式获取到TXOP， 若STA通过EDCA竞争方式获取到的TXOP，称之为EDCA TXOP若是通过HCCA方式获取到的TXOP，称之为HCCA TXOP","tags":["wlan","Wi-Fi","802.11"],"categories":["Wi-Fi"]},{"title":"Wi-Fi芯片架构介绍","path":"/2023/07/23/2023-07-23_Wi-Fi_chip_arch_intro/","content":"Wi-Fi芯片架构介绍Wi-Fi芯片是基于 IEEE 802.11 协议实现的， 根据 802.11 协议内容，定义了网络协议栈中的MAC层和PHY层的功能， 因此Wi-Fi芯片也是分为MAC层和PHY层，以及MAC和PHY之间的接口。 Wi-Fi芯片的整体框图如下所示 MCU: 一般使用ARM Cortex-M或者Cortex-R CPU核，还有就是开源的RISC-V架构CPU核， 用来运行嵌入式Firmware软件。 TCM: Tightly Coupled Memory的缩写，低延时的memory， 又分 ITCM：存储代码段。 DTCM：存储数据段。 RAM: 软件运行所需要的存储空间。 MAC: 实现 IEEE 802.11 协议中定义的MAC层功能，MAC层功能有分为 软件实现部分， 硬件实现部分， 一般是对时序有严格要求（如SIFS时间内要回复ACK帧之类）特性，或者是降低软件操作的MIPS等（比如加解密&#x2F;AMPDU聚合等）需要通过硬件实现。 PHY: 主要实现编解码, 调制&#x2F;解调等功能。 ABB：模拟基带模块，分为如下两部分 ADC: 模数转换，把模拟基带信号转换为数字基带信号。 DAC: 数模转换，把数字基带信号转换为模拟基带信号。 RF: 射频模块，主要是完成基带信号与高频信号之间的转换。 电源单元：Wi-Fi芯片内部对各模块进行供电。 时钟单元：Wi-Fi芯片内部给各模块提供工作时钟。 总线：用于和主控CPU之间的数据传输通道和配置通道，常见的总线接口有 PCIe USB AXI SDIO 参考 TCM interfaces","tags":["wlan","Wi-Fi"],"categories":["Wi-Fi"]},{"title":"无线路由器框图介绍","path":"/2023/07/23/2023-07-23_wireless-router_arch_intro/","content":"当前家用无线路由器的典型框图如下图所示 无线路由器完成的主要功能： 下行：完成以太网口报文到无线报文的转发 上行：完成 Wi-Fi 无线报文到以太网有线报文的转发 为此，对于整个无线路由器涉及如下模块： 以太网芯片： 有线口数据收发 WLAN芯片：无线口数据收发 主控CPU：对外围芯片的控制，协议栈报文的处理和转发 内存：数据报文的缓存，软件运行使用等 晶振：提供时钟 电源模块：单板供电 以下重点对WLAN芯片进行介绍 WLAN: Wireless LAN的缩写， 无线局域网的意思， 目前主流的WLAN芯片是基于IEEE 802.11协议实现的。因此，狭义的WLAN芯片也就指基于IEEE 802.11协议的芯片。 同时， 对于基于IEEE 802.11协议实现的WLAN芯片， 需要进行Wi-Fi认证， Wi-Fi是Wi-Fi联盟的商标，因此有时也称WLAN芯片为Wi-Fi芯片。 总结一句话：WLAN芯片和Wi-Fi芯片，指的都是基于IEEE 802.11协议实现的无线局域网芯片，只是又多种叫法而已。 因此， 想要深入了解Wi-Fi芯片的工作原理，首先对IEEE 802.11协议需要有个深入地学习， 所有的Wi-Fi芯片的实现都要遵循IEEE 802.11协议，否则不同厂家的Wi-Fi之间的通信可能会存在兼容性问题。 IEEE 802.11协议简介 最新的协议是 IEEE 802.11be (Wi-Fi 7)，当前主流芯片是基于 IEEE 802.11ax (Wi-Fi 6)。 先理一下 IEEE 802.11 协议的发展， 从 1997 年开始发布的第一版802.11协议开始，到当前（2023年）的802.11be, 25年左右的时间中，IEEE 802.11工作组（WG)基于高吞吐、低延时、安全等方面提供了各种协议。 具体可以参考IEEE网站：https://www.ieee802.org/11/，其中11b&#x2F;g&#x2F;a&#x2F;n&#x2F;ac&#x2F;ax协议是主要的关键协议, 大概发布的时间以及主要特性功能点如下表所示 协议 发布时间 主要功能点 802.11 1997 第一版协议, 1M ~ 2M 速率 802.11 b 1999 支持 1M~11M 速率 802.11 a 1999 802.11 g 2003 802.11 n 2009 802.11 ac 2013 802.11 ax 2019 802.11 be 2024?","tags":["wlan"],"categories":["wlan"]},{"title":"Hello World","path":"/2023/07/23/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":["Hexo"],"categories":["Hexo"]},{"title":"wlan simu 应用程序","path":"/wiki/wlan_simu/app_module.html","content":"hostapd下载编译安装运行wpa_supplicant下载编译安装运行"},{"title":"wlan simu使用说明","path":"/wiki/wlan_simu/index.html","content":"wlan simu简介"},{"title":"知识库","path":"/wiki/notes/index.html","content":"info知识库，用于记录各种知识点，备忘"},{"title":"IEEE 802.11协议名词解释","path":"/wiki/notes/ieee80211_abbreate.html","content":"note +HTC frame： 包含HT Control字段的帧, Control Wrapper frame 是一个 +HTC frame"},{"title":"RF相关资料","path":"/wiki/notes/rf_related.html","content":"Direct Conversion (Zero-IF) Receiver Specifications of a Radio Receiver What is Error Vector Magnitude (EVM)? IQ Data Explained"}]